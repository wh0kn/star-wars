AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  star-wars

  Sample SAM Template for star-wars
  
Globals:
  Function:
    Timeout: 3
    Tracing: Active
  Api:
    TracingEnabled: True

Parameters:
  Prefix:
    Type: String
    Description: Prefix for resources

  DocDBIdentifier:
    Type: String
    Description: Amazon DocumentDB cluster identifier

  DocDBUsername:
    Type: String
    Description: Username for the Amazon DocumentDB cluster

  DocDBPassword:
    Type: String
    Description: Password for the Amazon DocumentDB cluster
    NoEcho: true
    MinLength: 5

  DocDBVPCSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: VPC Subnet with connectivity to Amazon DocumentDB cluster

  DocDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security group with access to Amazon DocumentDB from within the VPC

  APIUsername:
    Type: String
    Description: Username to allow access to the API

  APIPassword:
    Type: String
    Description: Password to allow access to the API
    NoEcho: true
    MinLength: 4

Resources:
# Secret Manager
  DocDBSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub ${Prefix}-DocDBSecret
      Description: This secret has the credentials for the DocumentDB cluster
      SecretString:
        !Join
          - ''
          - - '{"username":"'
            - !Ref DocDBUsername
            - '","password":"'
            - !Ref DocDBPassword
            - '", "ssl": true}'

  SecretDocDBClusterAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref DocDBSecret
      TargetId: !Ref DocDBIdentifier
      TargetType: AWS::DocDB::DBCluster

# IAM
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSLambdaExecute
      Policies:
        - PolicyName: DocumentDBSecret
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref DocDBSecret
      RoleName: !Sub ${Prefix}-Role-Lambda
# Lambda
  ListCharactersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: handlers/list-characters.listCharactersHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Events:
        ListCharacters:
          Type: Api
          Properties:
            Path: /characters
            Method: GET
  CreateCharacterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: handlers/create-character.createCharacterHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Events:
        CreateCharacter:
          Type: Api
          Properties:
            Path: /characters
            Method: POST
  RetrieveCharacterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: handlers/retrieve-character.retrieveCharacterHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Events:
        RetrieveCharacter:
          Type: Api
          Properties:
            Path: /characters/{characterId}
            Method: GET
  ListCharacterEpisodesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: handlers/list-character-episodes.listCharacterEpisodesHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Events:
        ListCharacterEpisodes:
          Type: Api
          Properties:
            Path: /characters/{characterId}/episodes
            Method: GET
  AddCharacterToEpisodeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: handlers/add-character-to-episode.addCharacterToEpisodeHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Events:
        AddCharacterToEpisode:
          Type: Api
          Properties:
            Path: /characters/{characterId}/episodes/{episodeId}
            Method: PUT
  RemoveCharacterFromEpisodeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: handlers/remove-character-from-episode.removeCharacterFromEpisodeHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Events:
        RemoveCharacterFromEpisode:
          Type: Api
          Properties:
            Path: /characters/{characterId}/episodes/{episodeId}
            Method: DELETE
  ListEpisodesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: handlers/list-episodes.listEpisodesHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Events:
        ListEpisodes:
          Type: Api
          Properties:
            Path: /episodes
            Method: GET
  CreateEpisodeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: handlers/create-episode.createEpisodeHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Events:
        CreateEpisode:
          Type: Api
          Properties:
            Path: /episodes
            Method: POST
  RetrieveEpisodeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: handlers/retrieve-episode.retrieveEpisodeHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Events:
        RetrieveEpisode:
          Type: Api
          Properties:
            Path: /episodes/{episodeId}
            Method: GET
  ListPlanetsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: handlers/list-planets.listPlanetsHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Events:
        ListPlanets:
          Type: Api
          Properties:
            Path: /planets
            Method: GET
  CreatePlanetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: handlers/create-planet.createPlanetHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Events:
        CreatePlanet:
          Type: Api
          Properties:
            Path: /planets
            Method: POST
  RetrievePlanetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/
      Handler: handlers/retrieve-planet.retrievePlanetHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Events:
        RetrievePlanet:
          Type: Api
          Properties:
            Path: /planets/{planetId}
            Method: GET

Outputs:
  StackName:
    Value: !Sub ${AWS::StackName}
  DocDBSecret:
    Value: !Ref DocDBSecret
  LambdaExecutionRole:
    Value: !Ref LambdaExecutionRole
  LambdaLayerPymongo:
    Value: !Ref LambdaLayerPymongo
  LambdaCRUDFunction:
    Value: !Ref LambdaCRUDFunction
  LambdaBasicAuthFunction:
    Value: !Ref LambdaBasicAuthFunction
  APIDocDBREST:
    Value: !Ref APIDocDBREST
  APIRoot:
    Value: !Sub ${APIDocDBREST}.execute-api.${AWS::Region}.amazonaws.com/${Prefix}-api/docdb
